use super::ast::*;

grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*([^*]|\*+[^/*])*\*+/" => {},
    _
}

pub CompUnit: CompUnit = {
    FuncDef => <>,
};

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
        FuncDef { <> }
    }
};

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { <> };

Number: Number = <int_const: IntConst> => Number { <> };

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

Exp: Exp = <add_exp: LOrExp> => Exp { <> };

PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::BracketedExp { bexp: Box::new(exp) },
    <number: Number> => PrimaryExp::Num { <> },
};

UnaryExp: UnaryExp = {
    <exp: PrimaryExp> => UnaryExp::Primary { primary_bexp: Box::new(exp) },
    <op: UnaryOp> <exp: UnaryExp> => UnaryExp::OpUnary {
        op,
        unary_bexp: Box::new(exp),
    }
};

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
};

MulExp: MulExp = {
    <exp: UnaryExp> => MulExp::Unary { unary_bexp: Box::new(exp) },
    <exp: MulExp> <op: MulOp> <unary: UnaryExp> => MulExp::MulOpUnary {
        bexp: Box::new(exp),
        op,
        unary_bexp: Box::new(unary),
    }
};

MulOp: MulOp = {
    "*" => MulOp::Mul,
    "/" => MulOp::Div,
    "%" => MulOp::Rem,
};

AddExp: AddExp = {
    <exp: MulExp> => AddExp::Mul { mul_bexp: Box::new(exp) },
    <exp: AddExp> <op: AddOp> <mul: MulExp> => AddExp::AddOpMul {
        bexp: Box::new(exp),
        op,
        mul_bexp: Box::new(mul),
    }
}

AddOp: AddOp = {
    "+" => AddOp::Add,
    "-" => AddOp::Sub,
};

RelExp: RelExp = {
    <exp: AddExp> => RelExp::Add { add_bexp: Box::new(exp) },
    <exp: RelExp> <op: RelOp> <add: AddExp> => RelExp::RelOpAdd {
        bexp: Box::new(exp),
        op,
        add_bexp: Box::new(add),
    }
};

RelOp: RelOp = {
    "<" => RelOp::Lt,
    "<=" => RelOp::Le,
    ">" => RelOp::Gt,
    ">=" => RelOp::Ge,
};

EqExp: EqExp = {
    <exp: RelExp> => EqExp::Rel { rel_bexp: Box::new(exp) },
    <exp: EqExp> <op: EqOp> <rel: RelExp> => EqExp::EqOpRel {
        bexp: Box::new(exp),
        op,
        rel_bexp: Box::new(rel),
    }
};

EqOp: EqOp = {
    "==" => EqOp::Eq,
    "!=" => EqOp::Ne,
};

LAndExp: LAndExp = {
    <exp: EqExp> => LAndExp::Eq { eq_bexp: Box::new(exp) },
    <exp: LAndExp> "&&" <eq: EqExp> => LAndExp::LAndEq {
        bexp: Box::new(exp),
        eq_bexp: Box::new(eq),
    }
};

LOrExp: LOrExp = {
    <exp: LAndExp> => LOrExp::LAnd { land_bexp: Box::new(exp) },
    <exp: LOrExp> "||" <land: LAndExp> => LOrExp::LOrLAnd {
        bexp: Box::new(exp),
        land_bexp: Box::new(land),
    }
};
