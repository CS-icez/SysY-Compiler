//! This module defines the grammar of the SysY language, described in EBNF.
//! I adjusted the grammars specified in
//! https://pku-minic.github.io/online-doc/#/misc-app-ref/sysy-spec
//! for convenience, while maintaining equivalence.
use super::ast::*;

grammar;

match {
    r"\s*" => {}, // Whitespace.
    r"//[^\n\r]*[\n\r]*" => {}, // Line comment.
    r"/\*([^*]|\*+[^/*])*\*+/" => {}, // Block comment.
    _
}

// http://lalrpop.github.io/lalrpop/tutorial/006_macros.html
// Patterns like `T, T, T`, can be empty.
Comma<T>: Vec<T> = {
    <mut v: (<T> ",")*> <e: T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

// Patterns like `[T][T][T]`, cannot be empty.
Square<T>: Vec<T> = ("[" <T> "]")+;

/// Program ::= CompUnit {CompUnit}
pub Program: Program = {
    <CompUnit*> => Program(<>),
};

/// CompUnit ::= VarDecl | FuncDef
CompUnit: CompUnit = {
    <VarDecl> => CompUnit::VarDecl(VarDecl { is_global: true, ..<> }),
    <FuncDef> => CompUnit::FuncDef(<>),
};

// Terminals.

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
};

// Variable declaration.

/// VarDecl ::= ["const"] BType VarDef {"," VarDef} ";"
VarDecl: VarDecl = {
     "const" <btype: BType> <var_defs: Comma<VarDef>> ";" => {
        VarDecl {
            is_global: false,
            is_const: true,
            btype, var_defs,
        }
     },
     <btype: BType> <var_defs: Comma<VarDef>> ";" => {
        VarDecl {
            is_global: false,
            is_const: false,
            btype, var_defs,
        }
     },
};

/// BType ::= "int" | "void"
BType: BType = {
    "int" => BType::Int,
    "void" => BType::Void,
}

/// VarDef ::= IDENT ["=" Exp]
///     | IDENT {"[" ConstExp "]"} "=" InitVal
VarDef: VarDef = {
    <Ident> => VarDef::Scalar(<>, None),
    <ident: Ident> "=" <exp: Exp> => VarDef::Scalar(ident, Some(exp)),
    <ident: Ident> <exps: Square<Exp>> => VarDef::Array(ident, exps, None),
    <ident: Ident> <exps: Square<Exp>> "=" <init: InitList> => VarDef::Array(
        ident, exps, Some(init),
    ),
};

/// InitVal ::= Exp | "{" [InitList {"," InitList}] "}"
InitList: InitList = {
    <Exp> => InitList::Exp(<>),
    "{" <Comma<InitList>> "}" => InitList::List(<>),
};

// Function definition.

/// FuncDef ::= BType IDENT "(" [FuncFParams] ")" Block
/// FuncFParams ::= FuncFParam {"," FuncFParam}
FuncDef: FuncDef = {
    <BType> <Ident> "(" <Comma<FuncFParam>> ")" <Block> => FuncDef(<>),
};

/// FuncFParam ::= BType IDENT
FuncFParam: FuncFParam = {
    <BType> <Ident> => FuncFParam(<>),
};

/// Block ::= "{" {BlockItem} "}"
Block: Block = {
    "{" <BlockItem*> "}" => Block(<>),
};

/// BlockItem ::= Decl | Stmt
BlockItem: BlockItem = {
    <VarDecl> => BlockItem::VarDecl(<>),
    <Stmt> => BlockItem::Stmt(<>),
};

// Statement.

/// Stmt ::= LVal "=" Exp ";"
///     | [Exp] ";"
///     | Block
///     | "if" "(" Exp ")" Stmt ["else" Stmt]
///     | "while" "(" Exp ")" Stmt
///     | "break" ";"
///     | "continue" ";"
///     | "return" Exp ";"
Stmt: Stmt = {
    <SimpleStmt> => <>,
    "if" "(" <exp: Exp> ")" <stmt: Stmt> => Stmt::If(exp, Box::new(stmt), None),
    "if" "(" <exp: Exp> ")" <stmt: ClosedStmt> "else" <else_stmt: Stmt> => Stmt::If(
        exp, Box::new(stmt), Some(Box::new(else_stmt)),
    ),
    "while" "(" <exp: Exp> ")" <stmt: Stmt> => Stmt::While(exp, Box::new(stmt)),
};

// In a closed statement, every `if` must have an `else` branch.
// Such grammar adjustment addresses the dangling-else problem by pairing
// every `else` with the nearest `if`.
// See also: https://en.wikipedia.org/wiki/Dangling_else
ClosedStmt: Stmt = {
    <SimpleStmt> => <>,
    "if" "(" <exp: Exp> ")" <stmt: ClosedStmt> "else" <else_stmt: ClosedStmt> => Stmt::If(
        exp, Box::new(stmt), Some(Box::new(else_stmt)),
    ),
    "while" "(" <exp: Exp> ")" <stmt: ClosedStmt> => Stmt::While(exp, Box::new(stmt)),
};

// I defined this rule to avoid writing the same code twice.
SimpleStmt: Stmt = {
    <LVal> "=" <Exp> ";" => Stmt::Assign(<>),
    ";" => Stmt::Empty,
    <Exp> ";" => Stmt::Exp(<>),
    <Block> => Stmt::Block(<>),
    "break" ";" => Stmt::Break,
    "continue" ";" => Stmt::Continue,
    "return" <Exp> ";" => Stmt::Return(<>),
};

// Expression.

/// Exp ::= LOrExp
Exp: Exp = {
     <LOrExp> => Exp::LOrExp(<>),
};

/// LVal ::= IDENT {"[" Exp "]"}
LVal: LVal = {
    <Ident> => LVal::Ident(<>),
    <Ident> <Square<Exp>> => LVal::ArrayElem(<>),
};

/// PrimaryExp ::= "(" Exp ")" | Number | LVal
PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::BracketedExp(Box::new(exp)),
    <Number> => PrimaryExp::Number(<>),
    <LVal> => PrimaryExp::LVal(<>),
};

/// Number ::= INT_CONST
Number: Number = {
    <IntConst> => Number(<>),
};

/// UnaryExp ::= PrimaryExp
///     | IDENT "(" [FuncRParams] ")"
///     | UnaryOp UnaryExp;
/// FuncRParams ::= Exp {"," Exp}
UnaryExp: UnaryExp = {
    <exp: PrimaryExp> => UnaryExp::Primary(Box::new(exp)),
    <Ident> "(" <Comma<Exp>> ")" => UnaryExp::FuncCall(<>),
    <op: UnaryOp> <exp: UnaryExp> => UnaryExp::OpUnary(op, Box::new(exp)),
};

/// UnaryOp ::= "+" | "-" | "!"
UnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
};

/// MulExp ::= UnaryExp | MulExp MulOp UnaryExp
MulExp: MulExp = {
    <exp: UnaryExp> => MulExp::Unary(Box::new(exp)),
    <exp: MulExp> <op: MulOp> <unary: UnaryExp> => MulExp::MulOpUnary(
        Box::new(exp), op, Box::new(unary),
    ),
};

/// MulOp ::= "*" | "/" | "%"
MulOp: MulOp = {
    "*" => MulOp::Mul,
    "/" => MulOp::Div,
    "%" => MulOp::Rem,
};

/// AddExp ::= MulExp | AddExp AddOp MulExp
AddExp: AddExp = {
    <exp: MulExp> => AddExp::Mul(Box::new(exp)),
    <exp: AddExp> <op: AddOp> <mul: MulExp> => AddExp::AddOpMul(
        Box::new(exp), op, Box::new(mul),
    ),
}

/// AddOp ::= "+" | "-"
AddOp: AddOp = {
    "+" => AddOp::Add,
    "-" => AddOp::Sub,
};

/// RelExp ::= AddExp | RelExp RelOp AddExp
RelExp: RelExp = {
    <exp: AddExp> => RelExp::Add(Box::new(exp)),
    <exp: RelExp> <op: RelOp> <add: AddExp> => RelExp::RelOpAdd(
        Box::new(exp), op, Box::new(add),
    ),
};

/// RelOp ::= "<=" | "<" | ">=" | ">"
RelOp: RelOp = {
    "<" => RelOp::Lt,
    "<=" => RelOp::Le,
    ">" => RelOp::Gt,
    ">=" => RelOp::Ge,
};

/// EqExp ::= RelExp | EqExp EqOp RelExp
EqExp: EqExp = {
    <exp: RelExp> => EqExp::Rel(Box::new(exp)),
    <exp: EqExp> <op: EqOp> <rel: RelExp> => EqExp::EqOpRel(
        Box::new(exp), op, Box::new(rel),
    ),
};

/// EqOp ::= "==" | "!="
EqOp: EqOp = {
    "==" => EqOp::Eq,
    "!=" => EqOp::Ne,
};

/// LAndExp ::= EqExp | LAndExp "&&" EqExp
LAndExp: LAndExp = {
    <exp: EqExp> => LAndExp::Eq(Box::new(exp)),
    <exp: LAndExp> "&&" <eq: EqExp> => LAndExp::LAndEq(
        Box::new(exp), Box::new(eq),
    ),
};

/// LOrExp ::= LAndExp | LOrExp "||" LAndExp
LOrExp: LOrExp = {
    <exp: LAndExp> => LOrExp::LAnd(Box::new(exp)),
    <exp: LOrExp> "||" <land: LAndExp> => LOrExp::LOrLAnd(
        Box::new(exp), Box::new(land),
    ),
};
