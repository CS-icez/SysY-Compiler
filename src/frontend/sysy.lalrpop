use super::ast::*;

grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*([^*]|\*+[^/*])*\*+/" => {},
    _
}

pub CompUnit: CompUnit = {
    FuncDef => <>,
};

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
        FuncDef { <> }
    }
};

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { <> };

Number: Number = <int_const: IntConst> => Number { <> };

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

Exp: Exp = <unary_exp: UnaryExp> => Exp { <> };

PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::BracketedExp { bexp: Box::new(exp) },
    <number: Number> => PrimaryExp::Num { <> },
};

UnaryExp: UnaryExp = {
    <exp: PrimaryExp> => UnaryExp::Primary { primary_bexp: Box::new(exp) },
    <op: UnaryOp> <exp: UnaryExp> => UnaryExp::OpExp { op, bexp: Box::new(exp) },
};

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
};

