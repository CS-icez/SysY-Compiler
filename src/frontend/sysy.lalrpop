use super::ast::*;

grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*([^*]|\*+[^/*])*\*+/" => {},
    _
}

// http://lalrpop.github.io/lalrpop/tutorial/006_macros.html
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub Program: Program = <CompUnit*> => Program(<>);

CompUnit: CompUnit = {
    <GlobalDecl> => CompUnit::GlobalDecl(<>),
    <FuncDef> => CompUnit::FuncDef(<>),
};

FuncDef: FuncDef = <BType> <Ident> "(" <Comma<FuncFParam>> ")" <Block> => FuncDef(<>);

FuncFParam: FuncFParam = <BType> <Ident> => FuncFParam(<>);

Block: Block = "{" <BlockItem*> "}" => Block(<>);

Stmt: Stmt = {
    <SimpleStmt> => <>,
    "if" "(" <exp: Exp> ")" <stmt: Stmt> => Stmt::If(exp, Box::new(stmt), None),
    "if" "(" <exp: Exp> ")" <stmt: ClosedStmt> "else" <else_stmt: Stmt> => Stmt::If(
        exp, Box::new(stmt), Some(Box::new(else_stmt)),
    ),
    "while" "(" <exp: Exp> ")" <stmt: Stmt> => Stmt::While(exp, Box::new(stmt)),
};

ClosedStmt: Stmt = {
    <SimpleStmt> => <>,
    "if" "(" <exp: Exp> ")" <stmt: ClosedStmt> "else" <else_stmt: ClosedStmt> => Stmt::If(
        exp, Box::new(stmt), Some(Box::new(else_stmt)),
    ),
    "while" "(" <exp: Exp> ")" <stmt: ClosedStmt> => Stmt::While(exp, Box::new(stmt)),
};

SimpleStmt: Stmt = {
    <LVal> "=" <Exp> ";" => Stmt::Assign(<>),
    ";" => Stmt::Empty,
    <Exp> ";" => Stmt::Exp(<>),
    <Block> => Stmt::Block(<>),
    "break" ";" => Stmt::Break,
    "continue" ";" => Stmt::Continue,
    "return" <Exp> ";" => Stmt::Return(<>),
};

Number: Number = <IntConst> => Number(<>);

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

Exp: Exp = <LOrExp> => Exp(<>);

PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::BracketedExp(Box::new(exp)),
    <Number> => PrimaryExp::Number(<>),
    <LVal> => PrimaryExp::LVal(<>),
};

UnaryExp: UnaryExp = {
    <exp: PrimaryExp> => UnaryExp::Primary(Box::new(exp)),
    <Ident> "(" <Comma<Exp>> ")" => UnaryExp::FuncCall(<>),
    <op: UnaryOp> <exp: UnaryExp> => UnaryExp::OpUnary(op, Box::new(exp)),
};

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Plus,
    "-" => UnaryOp::Minus,
    "!" => UnaryOp::Not,
};

MulExp: MulExp = {
    <exp: UnaryExp> => MulExp::Unary(Box::new(exp)),
    <exp: MulExp> <op: MulOp> <unary: UnaryExp> => MulExp::MulOpUnary(
        Box::new(exp), op, Box::new(unary),
    ),
};

MulOp: MulOp = {
    "*" => MulOp::Mul,
    "/" => MulOp::Div,
    "%" => MulOp::Rem,
};

AddExp: AddExp = {
    <exp: MulExp> => AddExp::Mul(Box::new(exp)),
    <exp: AddExp> <op: AddOp> <mul: MulExp> => AddExp::AddOpMul(
        Box::new(exp), op, Box::new(mul),
    ),
}

AddOp: AddOp = {
    "+" => AddOp::Add,
    "-" => AddOp::Sub,
};

RelExp: RelExp = {
    <exp: AddExp> => RelExp::Add(Box::new(exp)),
    <exp: RelExp> <op: RelOp> <add: AddExp> => RelExp::RelOpAdd(
        Box::new(exp), op, Box::new(add),
    ),
};

RelOp: RelOp = {
    "<" => RelOp::Lt,
    "<=" => RelOp::Le,
    ">" => RelOp::Gt,
    ">=" => RelOp::Ge,
};

EqExp: EqExp = {
    <exp: RelExp> => EqExp::Rel(Box::new(exp)),
    <exp: EqExp> <op: EqOp> <rel: RelExp> => EqExp::EqOpRel(
        Box::new(exp), op, Box::new(rel),
    ),
};

EqOp: EqOp = {
    "==" => EqOp::Eq,
    "!=" => EqOp::Ne,
};

LAndExp: LAndExp = {
    <exp: EqExp> => LAndExp::Eq(Box::new(exp)),
    <exp: LAndExp> "&&" <eq: EqExp> => LAndExp::LAndEq(
        Box::new(exp), Box::new(eq),
    ),
};

LOrExp: LOrExp = {
    <exp: LAndExp> => LOrExp::LAnd(Box::new(exp)),
    <exp: LOrExp> "||" <land: LAndExp> => LOrExp::LOrLAnd(
        Box::new(exp), Box::new(land),
    ),
};

GlobalDecl: GlobalDecl = <Decl> => GlobalDecl(<>);

Decl: Decl = {
    <ConstDecl> => Decl::ConstDecl(<>),
    <VarDecl> => Decl::VarDecl(<>),
};

ConstDecl: ConstDecl = "const" <BType> <Comma<ConstDef>> ";" => ConstDecl(<>);

BType: BType = {
    "int" => BType::Int,
    "void" => BType::Void,
}

ConstDef: ConstDef = <Ident> "=" <ConstInitVal> => ConstDef(<>);

ConstInitVal: ConstInitVal = <ConstExp> => ConstInitVal(<>);

VarDecl: VarDecl = <BType> <Comma<VarDef>> ";" => VarDecl(<>);

VarDef: VarDef = {
    <Ident> => VarDef::NoInit(<>),
    <Ident> "=" <InitVal> => VarDef::Init(<>),
};

InitVal: InitVal = <Exp> => InitVal::Exp(<>);

BlockItem: BlockItem = {
    <Decl> => BlockItem::Decl(<>),
    <Stmt> => BlockItem::Stmt(<>),
};

LVal: LVal = <Ident> => LVal(<>);

ConstExp: ConstExp = <Exp> => ConstExp(<>);
